# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# See https://www.packer.io/docs/templates/hcl_templates/blocks/packer for more info
packer {
  required_plugins {
    qemu = {
      source  = "github.com/hashicorp/qemu"
      version = "~> 1"
    }
    vagrant = {
      source  = "github.com/hashicorp/vagrant"
      version = "~> 1"
    }
    vmware = {
      source  = "github.com/hashicorp/vmware"
      version = "~> 1"
    }
  }
}

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "btrfs_layout" {
  type    = string
  default = "current"
}

variable "country" {
  type    = string
  default = "US"
}

variable "grub_passphrase" {
  type    = string
  default = "yes"
}

variable "headless" {
  type    = string
  default = "false"
}

variable "install_type" {
  type    = string
  default = "luks_btrfs"
}

variable "luks_encryption" {
  type    = string
  default = "yes"
}

variable "ssh_timeout" {
  type    = string
  default = "20m"
}

variable "write_zeros" {
  type    = string
  default = "true"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

# All locals variables are generated from variables that uses expressions
# that are not allowed in HCL2 variables.
# Read the documentation for locals blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/locals
locals {
  iso_checksum_url = "https://mirrors.kernel.org/archlinux/iso/${legacy_isotime("2006.01")}.01/sha256sums.txt"
  iso_url          = "https://mirrors.kernel.org/archlinux/iso/${legacy_isotime("2006.01")}.01/archlinux-${legacy_isotime("2006.01")}.01-x86_64.iso"
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "qemu" "arch" {
  boot_command     = ["/usr/bin/curl -O http://{{ .HTTPIP }}:{{ .HTTPPort }}/enable-ssh.sh<enter><wait5>", "/usr/bin/bash ./enable-ssh.sh<enter>"]
  boot_wait        = "50s"
  cpus             = 1
  disk_size        = 30720
  headless         = "${var.headless}"
  http_directory   = "srv"
  iso_checksum     = "file:${local.iso_checksum_url}"
  iso_url          = "${local.iso_url}"
  memory           = 768
  qemuargs         = [["-bios", "/usr/share/edk2-ovmf/x64/OVMF.fd"]]
  shutdown_command = "sudo -S shutdown -P now"
  ssh_password     = "vagrant"
  ssh_timeout      = "${var.ssh_timeout}"
  ssh_username     = "vagrant"
}

source "virtualbox-iso" "arch" {
  boot_command         = ["/usr/bin/curl -O http://{{ .HTTPIP }}:{{ .HTTPPort }}/enable-ssh.sh<enter><wait5>", "/usr/bin/bash ./enable-ssh.sh<enter>"]
  boot_wait            = "50s"
  cpus                 = 1
  disk_size            = 30720
  guest_additions_mode = "disable"
  guest_os_type        = "ArchLinux_64"
  hard_drive_interface = "sata"
  headless             = "${var.headless}"
  http_directory       = "srv"
  iso_checksum         = "file:${local.iso_checksum_url}"
  iso_interface        = "sata"
  iso_url              = "${local.iso_url}"
  memory               = 768
  post_shutdown_delay  = "120s"
  shutdown_command     = "sudo -S shutdown -P now"
  ssh_password         = "vagrant"
  ssh_timeout          = "${var.ssh_timeout}"
  ssh_username         = "vagrant"
  vboxmanage           = [["modifyvm", "{{ .Name }}", "--firmware", "efi"], ["modifyvm", "{{ .Name }}", "--nat-localhostreachable1", "on"]]
}

source "vmware-iso" "arch" {
  boot_command     = ["/usr/bin/curl -O http://{{ .HTTPIP }}:{{ .HTTPPort }}/enable-ssh.sh<enter><wait5>", "/usr/bin/bash ./enable-ssh.sh<enter>"]
  boot_wait        = "50s"
  cpus             = 1
  disk_size        = 30720
  headless         = "${var.headless}"
  http_directory   = "srv"
  iso_checksum     = "file:${local.iso_checksum_url}"
  iso_url          = "${local.iso_url}"
  memory           = 768
  shutdown_command = "sudo -S shutdown -P now"
  ssh_password     = "vagrant"
  ssh_timeout      = "${var.ssh_timeout}"
  ssh_username     = "vagrant"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.qemu.x86_64", "source.virtualbox-iso.x86_64", "source.vmware-iso.x86_64"]

  provisioner "shell" {
    execute_command   = "{{ .Vars }} COUNTRY=${var.country} BTRFS_LAYOUT=${var.btrfs_layout} LUKS_ENCRYPTION=${var.luks_encryption} GRUB_PASSPHRASE=${var.grub_passphrase} sudo -E -S bash '{{ .Path }}'"
    expect_disconnect = true
    script            = "scripts/install-base-luks-btrfs.sh"
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} LUKS_ENCRYPTION=${var.luks_encryption} GRUB_PASSPHRASE=${var.grub_passphrase} sudo -E -S bash '{{ .Path }}'"
    only            = ["virtualbox-iso"]
    script          = "scripts/install-virtualbox.sh"
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} sudo -E -S bash '{{ .Path }}'"
    only            = ["vmware-iso"]
    script          = "scripts/install-vmware.sh"
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} sudo -E -S bash '{{ .Path }}'"
    only            = ["qemu"]
    script          = "scripts/install-qemu.sh"
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} WRITE_ZEROS=${var.write_zeros} sudo -E -S bash '{{ .Path }}'"
    script          = "scripts/cleanup.sh"
  }

  post-processor "vagrant" {
    output = "output/packer_arch_${var.install_type}_{{ .Provider }}-${legacy_isotime("2006.01")}.01.box"
  }
}
